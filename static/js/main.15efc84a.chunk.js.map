{"version":3,"sources":["BankAccount/Controls/Controls.module.css","BankAccount/Balance/Balance.module.css","BankAccount/TransactionHistory/Transactions.module.css","App/App.module.css","BankAccount/Controls/Controls.js","BankAccount/Balance/Balance.js","BankAccount/TransactionHistory/Transactions.js","services/localStorage.js","BankAccount/Dashboard/Dashboard.js","App/App.js","index.js"],"names":["module","exports","toast","configure","Controls","state","moneyAmount","handleChange","e","setState","currentTarget","value","setTimeout","this","props","onDeposit","onWithdraw","className","styles","controls","type","name","onChange","onClick","Component","Balance","balance","income","expenses","totalIncome","totalExpences","Transactions","items","length","history","map","item","key","id","amount","date","defaultProps","localStorage","setItem","JSON","stringify","err","Error","notesFromLS","getItem","parse","console","log","TRANSACTIONS","DEPOSIT","WITHDRAW","MESSAGES","NOT_ENOUGH_MONEY","ENTER_THE_AMOUNT","SUCCESSFULL","Dashboard","transactions","onTransaction","transactionType","Date","amountConvertToFloat","parseFloat","transaction","shortid","generate","toLocaleString","success","error","count","criterion","filter","reduce","acc","countTotalIncome","countTotalExpences","storage","prevProps","prevState","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15efc84a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__1ExHn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__1GtZd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"Transactions_history__1Kyfw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2htTF\",\"App-logo\":\"App_App-logo__25i0o\",\"App-header\":\"App_App-header__1IRpC\",\"App-link\":\"App_App-link__2DDjV\"};","import React, { Component } from 'react';\nimport T from 'prop-types';\nimport { toast } from 'react-toastify';\nimport styles from './Controls.module.css';\n\ntoast.configure();\n\nclass Controls extends Component {\n  static propTypes = {\n    onDeposit: T.func.isRequired,\n    onWithdraw: T.func.isRequired,\n  };\n\n  state = {\n    moneyAmount: '',\n  };\n\n  handleChange = e => {\n    this.setState({\n      moneyAmount: e.currentTarget.value,\n    });\n    setTimeout(() => {\n      this.setState({ moneyAmount: '' });\n    }, 4000);\n  };\n\n  render() {\n    const { moneyAmount } = this.state;\n    const { onDeposit, onWithdraw } = this.props;\n    return (\n      <section className={styles.controls}>\n        <input\n          type=\"number\"\n          name=\"amount\"\n          value={moneyAmount}\n          onChange={this.handleChange}\n        />\n        <button type=\"button\" onClick={() => onDeposit(moneyAmount)}>\n          Deposit\n        </button>\n        <button type=\"button\" onClick={() => onWithdraw(moneyAmount)}>\n          Withdraw\n        </button>\n      </section>\n    );\n  }\n}\n\nexport default Controls;\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = ({ balance, income, expenses }) => {\n  const totalIncome = income();\n  const totalExpences = expenses();\n  return (\n    <section className={styles.balance}>\n      <span>&#8593; </span>\n      <span>{totalIncome}$</span>\n      <span>&#8595; </span>\n      <span>{totalExpences}$</span>\n      <span>Balance: {balance}$</span>\n    </section>\n  );\n};\n\nBalance.propTypes = {\n  balance: T.number.isRequired,\n  income: T.func.isRequired,\n  expenses: T.func.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Transactions.module.css';\n\nconst Transactions = ({ items }) => {\n  return (\n    <>\n      {items.length > 0 && (\n        <table className={styles.history}>\n          <thead>\n            <tr>\n              <th>Transaction</th>\n              <th>Amount</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {items.map(item => (\n              <tr key={item.id}>\n                <td>{item.type}</td>\n                <td>{item.amount}$</td>\n                <td>{item.date}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\nTransactions.defaultProps = {\n  items: [\n    {\n      id: 'default',\n      type: 'No transactions yet',\n      amount: '0',\n      date: '-',\n    },\n  ],\n};\n\nTransactions.propTypes = {\n  items: T.arrayOf(\n    T.shape({\n      id: T.string.isRequired,\n      type: T.string.isRequired,\n      amount: T.number.isRequired,\n      date: T.string.isRequired,\n    }).isRequired,\n  ),\n};\n\nexport default Transactions;\n","const save = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (err) {\n    throw new Error();\n  }\n};\n\nconst get = key => {\n  try {\n    const notesFromLS = localStorage.getItem(key);\n    return notesFromLS ? JSON.parse(notesFromLS) : null;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return null;\n};\n\nexport default { save, get };\n","/*eslint-disable */\nimport React, { Component } from 'react';\nimport T from 'prop-types';\nimport shortid from 'shortid';\nimport Controls from '../Controls';\nimport Balance from '../Balance';\nimport Transactions from '../TransactionHistory';\nimport { toast } from 'react-toastify';\nimport storage from '../../services/localStorage';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure();\nconst TRANSACTIONS = {\n  DEPOSIT: 'Deposit',\n  WITHDRAW: 'Withdraw',\n};\n\nconst MESSAGES = {\n  NOT_ENOUGH_MONEY: 'На счету недостаточно средств для проведения операции!',\n  ENTER_THE_AMOUNT: 'Введите сумму для проведения операции!',\n  SUCCESSFULL: 'Транзакция прошла успешно!',\n};\n\nclass Dashboard extends Component {\n  static defaultProps = {\n    transactions: [],\n    balance: 0,\n  };\n\n  static propTypes = {\n    transactions: T.arrayOf(\n      T.shape({\n        id: T.string.isRequired,\n        type: T.string.isRequired,\n        amount: T.number.isRequired,\n        date: T.string.isRequired,\n      }).isRequired,\n    ),\n    balance: T.number,\n  };\n\n  state = {\n    transactions: [],\n    balance: 0,\n  };\n\n  componentDidMount() {\n    const transactions = storage.get('transactions');\n    const balance = storage.get('balance');\n    if (transactions && balance) {\n      this.setState({ transactions, balance });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.transactions !== this.state.transactions) {\n      storage.save('transactions', this.state.transactions);\n      storage.save('balance', this.state.balance);\n    }\n  }\n\n  onTransaction = (amount, transactionType) => {\n    if (amount === '' || amount === 0) {\n      toast(MESSAGES.ENTER_THE_AMOUNT);\n      return;\n    }\n    const date = new Date();\n    const amountConvertToFloat = parseFloat(amount);\n    const transaction = {\n      id: shortid.generate(),\n      type: transactionType,\n      amount: amountConvertToFloat,\n      date: date.toLocaleString(),\n    };\n\n    transactionType === TRANSACTIONS.DEPOSIT\n      ? this.setState(state => ({\n          transactions: [...state.transactions, transaction],\n          balance: state.balance + transaction.amount,\n        }))\n      : this.setState(state => ({\n          transactions: [...state.transactions, transaction],\n          balance: state.balance - transaction.amount,\n        }));\n\n    toast.success(MESSAGES.SUCCESSFULL);\n    return transaction;\n  };\n\n  onDeposit = amount => {\n    this.onTransaction(amount, TRANSACTIONS.DEPOSIT);\n  };\n\n  onWithdraw = amount => {\n    if (amount > this.state.balance) {\n      toast.error(MESSAGES.NOT_ENOUGH_MONEY);\n      return;\n    }\n    this.onTransaction(amount, TRANSACTIONS.WITHDRAW);\n  };\n\n  count = criterion => {\n    const { transactions } = this.state;\n    const filteredItems = transactions.filter(\n      transaction => transaction.type === criterion,\n    );\n\n    return filteredItems.reduce((acc, item) => acc + item.amount, 0);\n  };\n\n  countTotalIncome = () => {\n    return this.count(TRANSACTIONS.DEPOSIT);\n  };\n\n  countTotalExpences = () => {\n    return this.count(TRANSACTIONS.WITHDRAW);\n  };\n\n  render() {\n    const { balance, transactions } = this.state;\n    return (\n      <div className=\"dashboard\">\n        <Controls onDeposit={this.onDeposit} onWithdraw={this.onWithdraw} />\n        <Balance\n          balance={balance}\n          income={this.countTotalIncome}\n          expenses={this.countTotalExpences}\n        />\n        <Transactions items={transactions} />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.module.css';\nimport Dashboard from '../BankAccount/Dashboard';\n\nconst App = () => {\n  return <Dashboard />;\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}